{"version":3,"sources":["Components/PotreeViewer.js","App.js","reportWebVitals.js","index.js"],"names":["Wrapper","styled","div","Potree","window","ParamSelect","updateParams","attributeObject","i","gradientObject","useControls","attribute","options","gradient","render","get","point_budget","value","min","max","step","FOV","useEffect","params","PointcloudNavigator","props","url","URLSearchParams","location","search","key","grad","potreeContainerDiv","React","createRef","handleParamUpdate","console","log","setState","state","view","queryAttribute","queryGradient","id","ref","this","className","viewerElem","current","viewer","Viewer","gradientName","attributeName","setEDLEnabled","setPointBudget","setControls","orbitControls","loadPointCloud","then","e","scene","pointcloud","material","minSize","pointSizeType","PointSizeType","ATTENUATED","activeAttributeName","Gradients","SPECTRAL","PLASMA","GRAYSCALE","RAINBOW","CONTOUR","addPointCloud","setFOV","position","set","lookAt","err","pointclouds","undefined","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.57a386a2.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from \"styled-components/macro\";\r\nimport { useControls } from 'leva';\r\nimport { useEffect } from 'react';\r\n\r\nconst Wrapper = styled.div`\r\n  background-color: black;\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100vh;\r\n  overflow: auto;\r\n  position: static;\r\n  align-content: center;\r\n`;\r\n\r\n// import vanillaJS Potree ;libs, /!\\ would be best with proper ES6 import\r\nconst Potree = window.Potree\r\n//console.log(Potree);\r\n\r\n\r\nconst ParamSelect = ({ updateParams }) => {\r\n    //File modelPath = new File(\"./models/\");  //gets the model path for models\r\n    //String modelList[] = modelpath.list();   //lists all model urls in the models folder\r\n\r\n    // const fs = require('fs');\r\n    // const modelList = fs.readdirSync('./models/judge_avatar/'); // file names instead of file paths? (dynamically :())\r\n\r\n    //manual implementatino of modellist -> brute force\r\n\r\n    const attributeOptions = [\"elevation\", \"classification\", \"number of returns\", \"return number\", \"intensity\"]\r\n    const gradientOptions = [\"spectral\", \"plasma\", \"grayscale\", \"rainbow\", \"contour\"]\r\n\r\n    const attributeObject = {}\r\n    for (let i of attributeOptions) {\r\n        attributeObject[i] = i;\r\n    }\r\n\r\n    const gradientObject = {}\r\n    for (let i of gradientOptions) {\r\n        gradientObject[i] = i;\r\n    }\r\n\r\n\r\n    const { attribute, gradient, point_budget, FOV } = useControls({\r\n        attribute: { options: attributeObject },\r\n        gradient: { options: gradientObject, render: (get) => get('attribute') == \"elevation\" },\r\n        point_budget: { value: 2000000, min: 100000, max: 5000000, step: 1, },\r\n        FOV: { value: 50, min: 20, max: 100, step: 1, }\r\n    })\r\n\r\n    useEffect(() => {\r\n        //console.log('updating params')\r\n        updateParams({ params: { attribute, gradient, point_budget, FOV } })\r\n    }, [attribute, gradient, point_budget, FOV])\r\n    return null\r\n}\r\n\r\nexport default class PointcloudNavigator extends React.Component {\r\n\r\n    constructor(props) {\r\n\r\n        const url = new URLSearchParams(window.location.search)\r\n        const key = url.get('attribute');\r\n        const grad = url.get('gradient');\r\n       //console.log('query params: ', key, grad)\r\n\r\n        super(props)\r\n        this.potreeContainerDiv = React.createRef();\r\n        this.handleParamUpdate = (params) => {\r\n            console.log('updating params')\r\n            this.setState(params)\r\n        }\r\n        //loading default\r\n        this.state = { params: { attribute: key, gradient: grad, point_budget: 2000000, FOV: 60}, view: null, queryAttribute: key, queryGradient: grad }\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id=\"potree-root\">\r\n                <Wrapper ref={this.potreeContainerDiv} className={\"potree_container \"}>\r\n                    <div id=\"potree_render_area\"></div>\r\n                </Wrapper>\r\n                {(this.state.queryAttribute === null) ? <ParamSelect updateParams={this.handleParamUpdate}></ParamSelect> : null}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    componentDidMount() {\r\n\r\n        // initialize Potree viewer\r\n        const viewerElem = this.potreeContainerDiv.current\r\n        const viewer = new Potree.Viewer(viewerElem);\r\n        this.setState({ viewer })\r\n\r\n        const urlSearchParams = new URLSearchParams(window.location.search);\r\n        const params = this.state.params\r\n        //console.log(params)\r\n        const key = params.attribute;\r\n        const gradientName = params.gradient;\r\n\r\n        var attributeName = \"\";\r\n        var viewerX = 485755.8425622129;\r\n        var viewerY = 5457897.079154126;\r\n        var viewerZ = 121.79049529340284;\r\n\r\n        let PointBudget = 0;\r\n\r\n        // Setting Attribute to be displayed\r\n        //\"classification\" \"number of returns\" \"\"return number\" \"elevation\"\r\n        if (key === null || key === \"elevation\") {\r\n            attributeName = \"elevation\";\r\n        } else {\r\n            attributeName = key;\r\n        }\r\n\r\n        viewer.setEDLEnabled(true);\r\n        viewer.setPointBudget(PointBudget);\r\n        viewer.setControls(viewer.orbitControls)\r\n\r\n        //console.log({ viewer })\r\n        // Load and add point cloud to scene, below is the address for hosting via amazon s3\r\n        //let url = \"https://oergeomatics-lidar-viz.s3.ca-central-1.amazonaws.com/pointcloud/ept.json\"\r\n\r\n        let url = \"./pointcloud/metadata.json\"\r\n\r\n        Potree.loadPointCloud(url).then(e => {\r\n\r\n            let scene = viewer.scene;\r\n            let pointcloud = e.pointcloud;\r\n            let material = pointcloud.material;\r\n\r\n            material.minSize = 2;\r\n            material.pointSizeType = Potree.PointSizeType.ATTENUATED;\r\n            material.activeAttributeName = attributeName;\r\n            material.gradient = Potree.Gradients.SPECTRAL;\r\n\r\n            if (gradientName === \"plasma\" || gradientName === \"PLASMA\") {\r\n                material.gradient = Potree.Gradients.PLASMA;\r\n            } else if (gradientName === \"grayscale\" || gradientName === \"GRAYSCALE\") {\r\n                material.gradient = Potree.Gradients.GRAYSCALE;\r\n            } else if (gradientName === \"rainbow\" || gradientName === \"RAINBOW\") {\r\n                material.gradient = Potree.Gradients.RAINBOW;\r\n            } else if (gradientName === \"contour\" || gradientName === \"CONTOUR\") {\r\n                material.gradient = Potree.Gradients.CONTOUR;\r\n            }\r\n\r\n            viewer.scene.addPointCloud(pointcloud);\r\n            viewer.setFOV(50);\r\n\r\n            // Camera Position\r\n            scene.view.position.set(viewerX, viewerY, viewerZ);\r\n            scene.view.lookAt(485620.651, 5457902.803, 27.656);\r\n            //viewer.fitToScreen();\r\n\r\n        }, e => console.err(\"ERROR: \", e));\r\n\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        if (this.state.viewer) {\r\n            this.state.viewer.setPointBudget(this.state.params.point_budget)\r\n            this.state.viewer.setFOV(this.state.params.FOV)\r\n            //console.log(this.state.viewer.scene.cameraP.position)\r\n        }\r\n        const attributeName = this.state.params.attribute;\r\n        const gradientName = this.state.params.gradient;\r\n\r\n        let scene = this.state.viewer.scene;\r\n        let pointcloud = scene.pointclouds[0];\r\n        if (pointcloud == undefined) {\r\n            return;\r\n        }\r\n        //console.log('updating material', this.state)\r\n        let material = pointcloud.material;\r\n\r\n        material.minSize = 2;\r\n        material.pointSizeType = Potree.PointSizeType.ATTENUATED;\r\n        material.activeAttributeName = attributeName;\r\n        material.gradient = Potree.Gradients.SPECTRAL;\r\n\r\n        if (gradientName === \"plasma\" || gradientName === \"PLASMA\") {\r\n            material.gradient = Potree.Gradients.PLASMA;\r\n        } else if (gradientName === \"grayscale\" || gradientName === \"GRAYSCALE\") {\r\n            material.gradient = Potree.Gradients.GRAYSCALE;\r\n        } else if (gradientName === \"rainbow\" || gradientName === \"RAINBOW\") {\r\n            material.gradient = Potree.Gradients.RAINBOW;\r\n        } else if (gradientName === \"contour\" || gradientName === \"CONTOUR\") {\r\n            material.gradient = Potree.Gradients.CONTOUR;\r\n        } else {\r\n            material.gradient = Potree.Gradients.SPECTRAL;\r\n        }\r\n\r\n    }\r\n\r\n\r\n}\r\n","import PointcloudNavigator from './Components/PotreeViewer'\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <PointcloudNavigator />\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}